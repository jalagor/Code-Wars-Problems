// You are given an array of integers a. A new array b is generated by rearranging the elements of a in the following way:

// b[0] is equal to a[0];
// b[1] is equal to the last element of a;
// b[2] is equal to a[1];
// b[3] is equal to the second-last element of a;
// and so on.
// Your task is to determine whether the new array b is sorted in strictly ascending order or not.

// Example

// For a = [1, 3, 5, 6, 4, 2], the output should be alternatingSort(a) = true.

// The new array b will look like [1, 2, 3, 4, 5, 6], which is in strictly ascending order, so the answer is true.

// For a = [1, 4, 5, 6, 3], the output should be alternatingSort(a) = false.

// The new array b will look like [1, 3, 4, 6, 5], which is not in strictly ascending order, so the answer is false.

// Input/Output

// [execution time limit] 4 seconds (js)

// [input] array.integer a

// The given array of integers.

// Guaranteed constraints:
// 1 ≤ a.length ≤ 105,
// -109 ≤ a[i] ≤ 109.

// [output] boolean

// A boolean representing whether the new array b will be sorted in strictly ascending order or not.


let doIt = [1, 3, 5, 6, 4, 2]
let odds = [1, 3, 5, 4, 2]
let bad = [1, 2, 3, 4, 5, 6]
let bad2 = [1, 2, 3, 4, 5]


function ascendingOrder(a){
    let max = a.length, i, comparisonInt

    for (i = 0; i < (max/2) ; i++){

        if( i != 0 && comparisonInt > a[i] ){
            return false 
        }
        if( a[i] > a[max-1-i] ){
            return false
        }
        comparisonInt = a[max-1-i]
    }
    return true
}


console.log( ascendingOrder(doIt) )
console.log( ascendingOrder(odds) )
console.log( ascendingOrder(bad2) )
console.log( ascendingOrder(bad) )



// You are given an array of arrays a. Your task is to group the arrays a[i] by their mean values, so that arrays with equal mean values are in the same group, and arrays with different mean values are in different groups.

// Each group should contain a set of indices (i, j, etc), such that the corresponding arrays (a[i], a[j], etc) all have the same mean. Return the set of groups as an array of arrays, where the indices within each group are sorted in ascending order, and the groups are sorted in ascending order of their minimum element.

// Example

// For

// a = [[3, 3, 4, 2],
//      [4, 4],
//      [4, 0, 3, 3],
//      [2, 3],
//      [3, 3, 3]]
// the output should be

// meanGroups(a) = [[0, 4],
//                  [1],
//                  [2, 3]]
// mean(a[0]) = (3 + 3 + 4 + 2) / 4 = 3;
// mean(a[1]) = (4 + 4) / 2 = 4;
// mean(a[2]) = (4 + 0 + 3 + 3) / 4 = 2.5;
// mean(a[3]) = (2 + 3) / 2 = 2.5;
// mean(a[4]) = (3 + 3 + 3) / 3 = 3.
// There are three groups of means: those with mean 2.5, 3, and 4. And they form the following groups:

// Arrays with indices 0 and 4 form a group with mean 3;
// Array with index 1 forms a group with mean 4;
// Arrays with indices 2 and 3 form a group with mean 2.5.
// Note that neither

// meanGroups(a) = [[0, 4],
//                  [2, 3],
//                  [1]]
// nor

// meanGroups(a) = [[0, 4],
//                  [1],
//                  [3, 2]]
// will be considered as a correct answer:

// In the first case, the minimal element in the array at index 2 is 1, and it is less then the minimal element in the array at index 1, which is 2.
// In the second case, the array at index 2 is not sorted in ascending order.
// For

// a = [[-5, 2, 3],
//      [0, 0],
//      [0],
//      [-100, 100]]
// the output should be

// meanGroups(a) = [[0, 1, 2, 3]]
// The mean values of all of the arrays are 0, so all of them are in the same group.

// Input/Output

// [execution time limit] 4 seconds (js)

// [input] array.array.integer a

// An array of arrays of integers.

// Guaranteed constraints:
// 1 ≤ a.length ≤ 100,
// 1 ≤ a[i].length ≤ 100,
// -100 ≤ a[i][j] ≤ 100.

// [output] array.array.integer

// An array of arrays, representing the groups of indices.




// You've created a new programming language, and now you've decided to add hashmap support to it. Actually you are quite disappointed that in common programming languages it's impossible to add a number to all hashmap keys, or all its values. So you've decided to take matters into your own hands and implement your own hashmap in your new language that has the following operations:

// insert x y - insert an object with key x and value y.
// get x - return the value of an object with key x.
// addToKey x - add x to all keys in map.
// addToValue y - add y to all values in map.
// To test out your new hashmap, you have a list of queries in the form of two arrays: queryTypes contains the names of the methods to be called (eg: insert, get, etc), and queries contains the arguments for those methods (the x and y values).

// Your task is to implement this hashmap, apply the given queries, and to find the sum of all the results for get operations.

// Example

// For queryType = ["insert", "insert", "addToValue", "addToKey", "get"] and query = [[1, 2], [2, 3], [2], [1], [3]], the output should be hashMap(queryType, query) = 5.

// The hashmap looks like this after each query:

// 1 query: {1: 2}
// 2 query: {1: 2, 2: 3}
// 3 query: {1: 4, 2: 5}
// 4 query: {2: 4, 3: 5}
// 5 query: answer is 5
// The result of the last get query for 3 is 5 in the resulting hashmap.



// For queryType = ["insert", "addToValue", "get", "insert", "addToKey", "addToValue", "get"] and query = [[1, 2], [2], [1], [2, 3], [1], [-1], [3]], the output should be hashMap(queryType, query) = 6.

// The hashmap looks like this after each query:

// 1 query: {1: 2}
// 2 query: {1: 4}
// 3 query: answer is 4
// 4 query: {1: 4, 2: 3}
// 5 query: {2: 4, 3: 3}
// 6 query: {2: 3, 3: 2}
// 7 query: answer is 2
// The sum of the results for all the get queries is equal to 4 + 2 = 6.

// Input/Output

// [execution time limit] 4 seconds (js)

// [input] array.string queryType

// Array of query types. It is guaranteed that each queryType[i] is either "addToKey", "addToValue", "get", or "insert".

// Guaranteed constraints:
// 1 ≤ queryType.length ≤ 105.

// [input] array.array.integer query

// Array of queries, where each query is represented either by two numbers for insert query or by one number for other queries. It is guaranteed that during all queries all keys and values are in the range [-109, 109].

// Guaranteed constraints:
// query.length = queryType.length,
// 1 ≤ query[i].length ≤ 2.

// [output] integer64

// The sum of the results for all get queries.